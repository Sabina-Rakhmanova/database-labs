CREATE TABLE departments (
	dept_id SERIAL PRIMARY KEY,
	dept_name VARCHAR(100) NOT NULL,
	location VARCHAR(100)
);

CREATE TABLE employees (
	emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	dept_id INTEGER REFERENCES departments(dept_id)
);

INSERT INTO departments (dept_name, location)
VALUES	('Frontend', 'Class A'),
		('Backend', 'Class B'),
		('QA', 'Class C');

INSERT INTO employees (first_name, last_name, dept_id)
VALUES ('Sabina', 'Rakhmanova', 1);


Output:

CREATE TABLE
CREATE TABLE
INSERT 0 3
INSERT 0 1

****

DROP TABLE IF EXISTS departments CASCADE;
DROP TABLE IF EXISTS employees CASCADE;

CREATE TABLE departments (
	dept_id SERIAL PRIMARY KEY,
	dept_name VARCHAR(100) NOT NULL,
	location VARCHAR(100)
);

CREATE TABLE employees (
	emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
);

DELETE FROM departments WHERE dept_id = 1;


Output:

DROP TABLE
DROP TABLE
CREATE TABLE
CREATE TABLE
DELETE 0

****

CREATE TABLE departments (
	dept_id SERIAL PRIMARY KEY,
	dept_name VARCHAR(100) NOT NULL,
	location VARCHAR(100)
);

CREATE TABLE employees (
	emp_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
);

DELETE FROM departments WHERE dept_id = 1;

Output:

DROP TABLE
DROP TABLE
CREATE TABLE
CREATE TABLE
DELETE 0

****

CREATE TABLE users (
	user_id SERIAL PRIMARY KEY,
	username VARCHAR (50) UNIQUE NOT NULL, 
	email VARCHAR (100) UNIQUE NOT NULL, 
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_profiles (
	profile_id SERIAL PRIMARY KEY,
	user_id INTEGER UNIQUE NOT NULL, 
	first_name VARCHAR (50), 
	last_name VARCHAR (50), 
	bio TEXT,
	profile_picture_url VARCHAR (255),
	FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

INSERT INTO users (username, email) 
VALUES	('Wely', 'wwwwwww@example.com');

INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
	(1, 'Samir', 'Alanov', 'Software developer passionate about databases');
	
SELECT * FROM users;
SELECT * FROM user_profiles;


 user_id | username |        email        |         created_at         
---------+----------+---------------------+----------------------------
       1 | Wely     | wwwwwww@example.com | 2025-10-13 17:30:52.380602
(1 row)

 profile_id | user_id | first_name | last_name |                      bio                      | profile_picture_url 
------------+---------+------------+-----------+-----------------------------------------------+---------------------
          1 |       1 | Samir      | Alanov    | Software developer passionate about databases | 
(1 row)

****


CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY, 
    dept_name VARCHAR(100) NOT NULL, 
    manager_name VARCHAR(100), 
    budget DECIMAL(10,2)
);

CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY, 
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    position VARCHAR(100), 
    salary DECIMAL(10,2), 
    hire_date DATE DEFAULT CURRENT_DATE, 
    dept_id INTEGER NOT NULL,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);

CREATE TABLE blog_posts (
    post_id SERIAL PRIMARY KEY, 
    title VARCHAR(200) NOT NULL, 
    content TEXT, 
    author VARCHAR(100),
    published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE comments (
    comment_id SERIAL PRIMARY KEY, 
    post_id INTEGER NOT NULL,
    commenter_name VARCHAR(100), 
    comment_text TEXT NOT NULL,
    comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES blog_posts(post_id) ON DELETE CASCADE
);

INSERT INTO departments (dept_name, manager_name, budget) VALUES
('AMI', 'Klara', 500000.00),
('ECO', 'Nargiza', 200000.00);

INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
('John', 'Smith', 'Software Engineer', 75000.00, 1),
('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
('Amira', 'Muratova', 'DevOps Engineer', 86000.00, 1),
('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);

SELECT d.dept_name, e.first_name, e.last_name, e.position
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
ORDER BY d.dept_name, e.last_name;

 dept_name | first_name | last_name |       position       
-----------+------------+-----------+----------------------
 AMI       | Jane       | Doe       | Senior Developer
 AMI       | Amira      | Muratova  | DevOps Engineer
 AMI       | John       | Smith     | Software Engineer
 ECO       | Sarah      | Davis     | Marketing Specialist
(4 rows)

****


CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    enrollment_date DATE DEFAULT CURRENT_DATE
);

CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_code VARCHAR(10) UNIQUE NOT NULL,
    course_name VARCHAR(100) NOT NULL,
    credits INTEGER NOT NULL,
    instructor VARCHAR(100)
);

CREATE TABLE student_enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    grade CHAR(2),
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
    UNIQUE (student_id, course_id) 
);

INSERT INTO students (first_name, last_name, email)
VALUES
    ('Aruzhan', 'Bekova', 'aruzhan.bekova@university.kz'),
    ('Timur', 'Kurbanov', 'timur.kurbanov@university.uz'),
    ('Madina', 'Rakhmatova', 'madina.rakhmatova@university.kg'),
    ('Eldar', 'Tursunov', 'eldar.tursunov@university.uz');


INSERT INTO courses (course_code, course_name, credits, instructor)
VALUES
    ('IT101', 'Introduction to Databases', 3, 'Dr. Aigul Saparova'),
    ('CS202', 'Algorithms and Data Structures', 4, 'Dr. Rustam Karimov'),
    ('MATH201', 'Discrete Mathematics', 4, 'Dr. Zhanna Abdurakhmanova'),
    ('ENG101', 'Academic English', 2, 'Ms. Dilnoza Rakhimova');

INSERT INTO student_enrollments (student_id, course_id, grade)
VALUES
    (1, 1, 'A'),     
    (1, 2, 'A-'),    
    (2, 1, 'B+'),    
    (2, 3, 'A'),    
    (3, 2, 'B'),   
    (3, 4, 'A'),     
    (4, 3, 'A-'),   
    (4, 1, 'B');   


SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
ORDER BY s.last_name, c.course_code;


SELECT
    s.first_name,
    s.last_name,
    se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'IT101';

SELECT
    c.course_code,
    c.course_name,
    c.credits,
    se.grade
FROM courses c
JOIN student_enrollments se ON c.course_id = se.course_id
JOIN students s ON se.student_id = s.student_id
WHERE s.email = 'aruzhan.bekova@university.kz';

   student_name    | course_code |          course_name           | grade | enrollment_date 
-------------------+-------------+--------------------------------+-------+-----------------
 Aruzhan Bekova    | CS202       | Algorithms and Data Structures | A-    | 2025-10-13
 Aruzhan Bekova    | IT101       | Introduction to Databases      | A     | 2025-10-13
 Timur Kurbanov    | IT101       | Introduction to Databases      | B+    | 2025-10-13
 Timur Kurbanov    | MATH201     | Discrete Mathematics           | A     | 2025-10-13
 Madina Rakhmatova | CS202       | Algorithms and Data Structures | B     | 2025-10-13
 Madina Rakhmatova | ENG101      | Academic English               | A     | 2025-10-13
 Eldar Tursunov    | IT101       | Introduction to Databases      | B     | 2025-10-13
 Eldar Tursunov    | MATH201     | Discrete Mathematics           | A-    | 2025-10-13
(8 rows)

 first_name | last_name | grade 
------------+-----------+-------
 Aruzhan    | Bekova    | A 
 Timur      | Kurbanov  | B+
 Eldar      | Tursunov  | B 
(3 rows)

 course_code |          course_name           | credits | grade 
-------------+--------------------------------+---------+-------
 IT101       | Introduction to Databases      |       3 | A 
 CS202       | Algorithms and Data Structures |       4 | A-
